{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "red",
    "glyph" : "newspaper"
  },
  "name" : "Read MacStories",
  "script" : "\/\/ This script shows articles from MacStories. The script can be used either in the app, as a widget on your Home Screen or through Shortcuts. The behaviour of the script will vary slightly depending on where it's used.\nlet items = await loadItems()\nif (config.runsInWidget) {\n  \/\/ Tell the widget on the Home Screen to show our ListWidget instance.\n  let widget = await createWidget(items)\n  Script.setWidget(widget)\n} else if (config.runsWithSiri) {\n  \/\/ Present a table with a subset of the news.\n  let firstItems = items.slice(0, 5)\n  let table = createTable(firstItems)\n  await QuickLook.present(table)\n} else {\n  \/\/ Present the full list of news.\n  let table = createTable(items)\n  await QuickLook.present(table)\n}\n\/\/ Calling Script.complete() signals to Scriptable that the script have finished running.\n\/\/ This can speed up the execution, in particular when running the script from Shortcuts or using Siri.\nScript.complete()\n\nasync function createWidget(items) {\n  let item = items[0]\n  let authors = item.authors.map(a => {\n    return a.name\n  }).join(\", \")\n  let imgURL = extractImageURL(item)\n  let rawDate = item[\"date_published\"]\n  let date = new Date(Date.parse(rawDate))\n  let dateFormatter = new DateFormatter()\n  dateFormatter.useMediumDateStyle()\n  dateFormatter.useShortTimeStyle()\n  let strDate = dateFormatter.string(date)\n  let gradient = new LinearGradient()\n  gradient.locations = [0, 1]\n  gradient.colors = [\n    new Color(\"#b00a0fe6\"),\n    new Color(\"#b00a0fb3\")\n  ]\n  let widget = new ListWidget()\n  if (imgURL != null) {\n    let imgReq = new Request(imgURL)\n    let img = await imgReq.loadImage()\n    widget.backgroundImage = img\n  }\n  widget.backgroundColor = new Color(\"#b00a0f\")\n  widget.backgroundGradient = gradient\n  \/\/ Add spacer above content to center it vertically.\n  widget.addSpacer()\n  \/\/ Show article headline.\n  let title = decode(item.title)\n  let titleElement = widget.addText(title)\n  titleElement.font = Font.boldSystemFont(16)\n  titleElement.textColor = Color.white()\n  titleElement.minimumScaleFactor = 0.75\n  \/\/ Add spacing below headline.\n  widget.addSpacer(8)\n  \/\/ Add footer woth authors and date.\n  let footerStack = widget.addStack()\n  let authorsElement = footerStack.addText(authors)\n  authorsElement.font = Font.mediumSystemFont(12)\n  authorsElement.textColor = Color.white()\n  authorsElement.textOpacity = 0.9\n  footerStack.addSpacer()\n  let dateElement = footerStack.addText(strDate)\n  dateElement.font = Font.mediumSystemFont(12)\n  dateElement.textColor = Color.white()\n  dateElement.textOpacity = 0.9\n  \/\/ Add spacing below content to center it vertically.\n  widget.addSpacer()\n  \/\/ Set URL to open when tapping widget.\n  widget.url = item.url\n  return widget\n}\n\nfunction createTable(items) {\n  let table = new UITable()\n  for (item of items) {\n    let row = new UITableRow()\n    let imageURL = extractImageURL(item)\n    let title = decode(item.title)\n    let imageCell = row.addImageAtURL(imageURL)\n    let titleCell = row.addText(title)\n    imageCell.widthWeight = 20\n    titleCell.widthWeight = 80\n    row.height = 60\n    row.cellSpacing = 10\n    row.onSelect = (idx) => {\n      let item = items[idx]\n      Safari.open(item.url)\n    }\n    row.dismissOnSelect = false\n    table.addRow(row)\n  }\n  return table\n}\n  \nasync function loadItems() {\n  let url = \"https:\/\/macstories.net\/feed\/json\"\n  let req = new Request(url)\n  let json = await req.loadJSON()\n  return json.items\n}\n\nfunction extractImageURL(item) {\n  let regex = \/<img src=\"(.*)\" alt=\"\/\n  let html = item[\"content_html\"]\n  let matches = html.match(regex)\n  if (matches && matches.length >= 2) {\n    return matches[1]\n  } else {\n    return null\n  }\n}\n\nfunction decode(str) {\n  let regex = \/&#(\\d+);\/g\n  return str.replace(regex, (match, dec) => {\n    return String.fromCharCode(dec)\n  })\n}",
  "share_sheet_inputs" : [

  ]
}